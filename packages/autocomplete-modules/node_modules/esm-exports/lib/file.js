"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const parse_1 = require("./parse");
const path_1 = require("path");
const module_1 = require("./module");
const resolve = require("resolve");
function file(path, options = {}) {
    const filepath = path_1.resolve(options.basedir || '.', path);
    return new Promise((done, reject) => {
        fs_1.readFile(filepath, { encoding: 'utf8' }, (err, data) => {
            if (err) {
                return reject(err);
            }
            options = Object.assign({}, options, { filepath: options.filepath || filepath });
            const entries = parse_1.parse(data, options);
            done({ entries, options });
        });
    })
        .then(function next({ entries, options }) {
        let unnamed;
        [unnamed, entries] = entries.reduce((result, m) => {
            result[Number(m.name != null)].push(m);
            return result;
        }, [[], []]);
        if (unnamed.length === 0) {
            return Promise.resolve(entries);
        }
        const basedir = path_1.dirname(filepath);
        const promises = unnamed.map(m => {
            return new Promise((done) => {
                if (!m.specifier) {
                    done([]);
                    return;
                }
                resolve(m.specifier, Object.assign({}, module_1.resolveOptions, { basedir }), (err, resolved) => {
                    // Supress error, file do not exists or not readable
                    // E.g. export * from "fs"
                    if (err) {
                        done([]);
                        return;
                    }
                    if (resolved) {
                        return file(resolved, options).then(items => {
                            done(items);
                        }, () => {
                            done([]);
                        });
                    }
                    done([]);
                });
            }).then(items => {
                entries.push(...items);
            });
        });
        return Promise.all(promises).then(() => {
            return entries;
        });
    });
}
exports.file = file;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkJBQThCO0FBQzlCLG1DQUFnQztBQUVoQywrQkFBdUQ7QUFDdkQscUNBQTBDO0FBQzFDLG1DQUFvQztBQVFwQyxjQUFxQixJQUFZLEVBQUUsVUFBdUIsRUFBRTtJQUN4RCxNQUFNLFFBQVEsR0FBRyxjQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLElBQUksT0FBTyxDQUE2QyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM1RSxhQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQVksRUFBRSxFQUFFO1lBQzNELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QixDQUFDO1lBQ0QsT0FBTyxxQkFBUSxPQUFPLElBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksUUFBUSxHQUFFLENBQUM7WUFDakUsTUFBTSxPQUFPLEdBQUcsYUFBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztTQUNHLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRTtRQUNwQyxJQUFJLE9BQWdCLENBQUM7UUFDckIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQWlCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUNELE1BQU0sT0FBTyxHQUFHLGNBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBVSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNmLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDVCxNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsb0JBQU8sdUJBQWMsSUFBRSxPQUFPLEtBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUU7b0JBQ25FLG9EQUFvRDtvQkFDcEQsMEJBQTBCO29CQUMxQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNOLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDVCxNQUFNLENBQUM7b0JBQ1gsQ0FBQztvQkFDRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTs0QkFDeEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNoQixDQUFDLEVBQUUsR0FBRyxFQUFFOzRCQUNKLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDYixDQUFDLENBQUMsQ0FBQztvQkFDUCxDQUFDO29CQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDYixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQXBERCxvQkFvREMifQ==